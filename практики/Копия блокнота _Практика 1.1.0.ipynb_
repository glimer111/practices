{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1f4ZFal4O7ifN3AaG6WxN89221OtIfCyY","timestamp":1732574279265},{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732592010219}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО:**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wZMLYG_G_-19"},"outputs":[],"source":["Бочкарев Пётр Владиславович"]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["class Employee:\n","  def __init__(self, name, base_salary):\n","    self.name = name\n","    self.base_salary = base_salary\n","\n","  def calculate_salary(self):\n","    return self.base_salary\n","\n","  def __str__(self):\n","    return f\"Employee: {self.name}, Base Salary: {self.base_salary}\"\n","\n","\n","class Manager(Employee):\n","  def __init__(self, name, base_salary, bonus):\n","    super().__init__(name, base_salary)\n","    self.bonus = bonus\n","\n","  def calculate_salary(self):\n","    return self.base_salary + self.bonus\n","\n","  def __str__(self):\n","    return f\"Manager: {self.name}, Base Salary: {self.base_salary}, Bonus: {self.bonus}\"\n","\n","\n","class Developer(Employee):\n","  def __init__(self, name, base_salary, projects_completed):\n","    super().__init__(name, base_salary)\n","    self.projects_completed = projects_completed\n","\n","  def calculate_salary(self):\n","    project_bonus = 500 * self.projects_completed\n","    return self.base_salary + project_bonus\n","\n","  def __str__(self):\n","    return f\"Developer: {self.name}, Base Salary: {self.base_salary}, Projects Completed: {self.projects_completed}\"\n","\n","\n","if __name__ == \"__main__\":\n","  manager = Manager(\"Alice\", 70000, 10000)\n","  developer = Developer(\"Bob\", 60000, 3)\n","\n","  print(manager)\n","  print(f\"Manager's Total Salary: {manager.calculate_salary()}\")\n","\n","  print(developer)\n","  print(f\"Developer's Total Salary: {developer.calculate_salary()}\")\n"],"metadata":{"id":"aexGXzqCAFH7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732576380463,"user_tz":-300,"elapsed":1030,"user":{"displayName":"K3nt1c","userId":"06930504406908418568"}},"outputId":"33937767-f695-45a8-a1bb-3657f7a306f6"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Manager: Alice, Base Salary: 70000, Bonus: 10000\n","Manager's Total Salary: 80000\n","Developer: Bob, Base Salary: 60000, Projects Completed: 3\n","Developer's Total Salary: 61500\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["class Vehicle:\n","  def __init__(self, brand, model):\n","    self.brand = brand\n","    self.model = model\n","\n","  def get_description(self):\n","    return f\"Vehicle: {self.brand} {self.model}\"\n","\n","\n","class Car(Vehicle):\n","  def __init__(self, brand, model, num_doors):\n","    super().__init__(brand, model)\n","    self.num_doors = num_doors\n","\n","  def get_description(self):\n","    return f\"Car: {self.brand} {self.model}, Doors: {self.num_doors}\"\n","\n","\n","class Bike(Vehicle):\n","  def __init__(self, brand, model, type_of_bike):\n","    super().__init__(brand, model)\n","    self.type_of_bike = type_of_bike\n","\n","  def get_description(self):\n","    return f\"Bike: {self.brand} {self.model}, Type: {self.type_of_bike}\"\n","\n","\n","class Truck(Vehicle):\n","  def __init__(self, brand, model, capacity):\n","    super().__init__(brand, model)\n","    self.capacity = capacity\n","\n","  def get_description(self):\n","    return f\"Truck: {self.brand} {self.model}, Capacity: {self.capacity} tons\"\n","\n","\n","if __name__ == \"__main__\":\n","  car = Car(\"Toyota\", \"Camry\", 4)\n","  bike = Bike(\"Yamaha\", \"YZF-R3\", \"Sport\")\n","  truck = Truck(\"Volvo\", \"FH16\", 18)\n","\n","  vehicles = [car, bike, truck]\n","\n","  for vehicle in vehicles:\n","    print(vehicle.get_description())\n"],"metadata":{"id":"WOFOZQmDBKf4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732577985679,"user_tz":-300,"elapsed":422,"user":{"displayName":"K3nt1c","userId":"06930504406908418568"}},"outputId":"693e42ba-dfb0-4281-e876-9222ca40f0cc"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Car: Toyota Camry, Doors: 4\n","Bike: Yamaha YZF-R3, Type: Sport\n","Truck: Volvo FH16, Capacity: 18 tons\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":["class Product:\n","  def __init__(self, name, price, stock, category):\n","    self.name = name\n","    self.price = price\n","    self.stock = stock\n","    self.category = category\n","\n","  def is_available(self, quantity):\n","    return self.stock >= quantity\n","\n","  def update_stock(self, quantity):\n","    self.stock -= quantity\n","\n","\n","class Order:\n","  def __init__(self, customer):\n","    self.customer = customer\n","    self.items = []\n","    self.total_price = 0.0\n","    self.discount = 0.0\n","    self.tax_rate = 0.2\n","\n","  def add_item(self, product, quantity):\n","    if product.is_available(quantity):\n","      product.update_stock(quantity)\n","      self.items.append((product, quantity))\n","      self.calculate_total()\n","    else:\n","      print(f\"Недостаточно товара {product.name} на складе.\")\n","\n","  def calculate_total(self):\n","    subtotal = sum(product.price * quantity for product, quantity in self.items)\n","    subtotal -= self.discount\n","    tax = subtotal * self.tax_rate\n","    self.total_price = subtotal + tax\n","\n","  def apply_discount(self, discount):\n","    self.discount = discount\n","    self.calculate_total()\n","\n","  def get_order_summary(self):\n","    summary = f\"Заказ для {self.customer.name}:\\n\"\n","    for product, quantity in self.items:\n","      summary += f\"- {product.name} (x{quantity}): {product.price * quantity:.2f}\\n\"\n","    summary += f\"Скидка: {self.discount:.2f}\\n\"\n","    summary += f\"Итого с налогом: {self.total_price:.2f}\\n\"\n","    return summary\n","\n","\n","class Customer:\n","  def __init__(self, name, email):\n","    self.name = name\n","    self.email = email\n","    self.order_history = []\n","\n","  def add_order(self, order):\n","    self.order_history.append(order)\n","\n","  def get_order_history(self):\n","    return [order.get_order_summary() for order in self.order_history]\n","\n","\n","class ShoppingCart:\n","  def __init__(self):\n","    self.items = {}\n","\n","  def add_product(self, product, quantity):\n","    if product.name in self.items:\n","      self.items[product.name]['quantity'] += quantity\n","    else:\n","      self.items[product.name] = {'product': product, 'quantity': quantity}\n","\n","  def remove_product(self, product_name):\n","    if product_name in self.items:\n","      del self.items[product_name]\n","\n","  def update_quantity(self, product_name, quantity):\n","    if product_name in self.items:\n","      if quantity <= 0:\n","        self.remove_product(product_name)\n","      else:\n","        self.items[product_name]['quantity'] = quantity\n","\n","  def view_cart(self):\n","    return [(item['product'].name, item['quantity']) for item in self.items.values()]\n","\n","\n","if __name__ == \"__main__\":\n","  product1 = Product(\"Ноутбук\", 1000.00, 10, \"Электроника\")\n","  product2 = Product(\"Смартфон\", 500.00, 5, \"Электроника\")\n","\n","  customer = Customer(\"Иван Иванов\", \"ivan@example.com\")\n","\n","  cart = ShoppingCart()\n","  cart.add_product(product1, 1)\n","  cart.add_product(product2, 2)\n","\n","  print(\"Товары в корзине:\")\n","  for name, quantity in cart.view_cart():\n","    print(f\"{name} (x{quantity})\")\n","\n","  order = Order(customer)\n","\n","  for item in cart.items.values():\n","    order.add_item(item['product'], item['quantity'])\n","\n","  order.apply_discount(100)\n","  print(order.get_order_summary())\n","\n","  customer.add_order(order)\n","\n","  print(\"\\nИстория заказов:\")\n","  for summary in customer.get_order_history():\n","    print(summary)\n"],"metadata":{"id":"wkCcv_K-Bwdv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732578133525,"user_tz":-300,"elapsed":414,"user":{"displayName":"K3nt1c","userId":"06930504406908418568"}},"outputId":"ae1560ab-db46-4a3b-8cd5-886e7b2d0645"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Товары в корзине:\n","Ноутбук (x1)\n","Смартфон (x2)\n","Заказ для Иван Иванов:\n","- Ноутбук (x1): 1000.00\n","- Смартфон (x2): 1000.00\n","Скидка: 100.00\n","Итого с налогом: 2280.00\n","\n","\n","История заказов:\n","Заказ для Иван Иванов:\n","- Ноутбук (x1): 1000.00\n","- Смартфон (x2): 1000.00\n","Скидка: 100.00\n","Итого с налогом: 2280.00\n","\n"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":["import random\n","\n","class SpaceShip:\n","  def __init__(self, name, fuel, hull_integrity, speed):\n","    self.name = name\n","    self.fuel = fuel\n","    self.hull_integrity = hull_integrity\n","    self.speed = speed\n","\n","  def fly(self, distance):\n","    fuel_needed = distance * self.speed * 0.1\n","    if self.fuel >= fuel_needed:\n","      self.fuel -= fuel_needed\n","      print(f\"{self.name} успешно пролетел {distance} световых лет.\")\n","    else:\n","      print(f\"Недостаточно топлива для полета на {distance} световых лет.\")\n","\n","  def repair_hull(self, amount):\n","    self.hull_integrity += amount\n","    if self.hull_integrity > 100:\n","      self.hull_integrity = 100\n","    print(f\"Целостность корпуса {self.name} восстановлена до {self.hull_integrity}.\")\n","\n","  def status(self):\n","    return f\"{self.name} - Топливо: {self.fuel}, Целостность корпуса: {self.hull_integrity}, Скорость: {self.speed}\"\n","\n","\n","class CrewMember:\n","  def __init__(self, name, health, skills, role):\n","    self.name = name\n","    self.health = health\n","    self.skills = skills\n","    self.role = role\n","\n","  def heal(self, amount):\n","    self.health += amount\n","    if self.health > 100:\n","      self.health = 100\n","    print(f\"{self.name} восстановил здоровье до {self.health}.\")\n","\n","  def status(self):\n","    return f\"{self.name} - Здоровье: {self.health}, Роль: {self.role}, Навыки: {self.skills}\"\n","\n","\n","class Mission:\n","  def __init__(self, objectives, resources):\n","    self.objectives = objectives\n","    self.resources = resources\n","\n","  def encounter_event(self):\n","    events = [\"встретил астероид\", \"нашел ресурс\", \"получил сигнал бедствия\"]\n","    event = random.choice(events)\n","    print(f\"Миссия столкнулась с событием: {event}\")\n","\n","  def status(self):\n","    return f\"Цели миссии: {', '.join(self.objectives)}, Ресурсы: {', '.join(self.resources)}\"\n","\n","\n","def main():\n","  spaceship = SpaceShip(\"Звездный Искатель\", fuel=1000, hull_integrity=80, speed=5)\n","\n","  pilot = CrewMember(\"Капитан Джон\", health=100, skills={\"пилотирование\": 90, \"навыки боя\": 70}, role=\"Пилот\")\n","  engineer = CrewMember(\"Инженер Сэм\", health=100, skills={\"ремонт\": 85, \"навыки боя\": 50}, role=\"Инженер\")\n","\n","  mission = Mission(objectives=[\"Исследовать новую планету\", \"Собрать образцы\"], resources=[\"Топливо\", \"Еда\"])\n","\n","  while True:\n","    print(\"\\nВыберите действие:\")\n","    print(\"1. Посмотреть статус корабля\")\n","    print(\"2. Посмотреть статус членов экипажа\")\n","    print(\"3. Посмотреть статус миссии\")\n","    print(\"4. Полететь на расстояние\")\n","    print(\"5. Ремонтировать корпус\")\n","    print(\"6. Восстановить здоровье члена экипажа\")\n","    print(\"7. Завершить игру\")\n","\n","    choice = input(\"Введите номер действия: \")\n","\n","    if choice == '1':\n","      print(spaceship.status())\n","\n","    elif choice == '2':\n","      print(pilot.status())\n","      print(engineer.status())\n","\n","    elif choice == '3':\n","      print(mission.status())\n","\n","    elif choice == '4':\n","      distance = float(input(\"Введите расстояние для полета (световые годы): \"))\n","      spaceship.fly(distance)\n","      mission.encounter_event()\n","\n","    elif choice == '5':\n","      repair_amount = float(input(\"Введите количество для ремонта корпуса: \"))\n","      spaceship.repair_hull(repair_amount)\n","\n","    elif choice == '6':\n","      member_choice = input(\"Введите имя члена экипажа для восстановления здоровья (Капитан Джон/Инженер Сэм): \")\n","      if member_choice.lower() == \"капитан джон\":\n","        heal_amount = float(input(\"Введите количество здоровья для восстановления: \"))\n","        pilot.heal(heal_amount)\n","      elif member_choice.lower() == \"инженер сэм\":\n","        heal_amount = float(input(\"Введите количество здоровья для восстановления: \"))\n","        engineer.heal(heal_amount)\n","      else:\n","        print(\"Член экипажа не найден.\")\n","\n","    elif choice == '7':\n","      print(\"Спасибо за игру!\")\n","      break\n","\n","    else:\n","      print(\"Неверный выбор.\")\n","\n","\n","if __name__ == \"__main__\":\n","  main()\n"],"metadata":{"id":"4NyrOOy8B9ED","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732584675787,"user_tz":-300,"elapsed":1662229,"user":{"displayName":"K3nt1c","userId":"06930504406908418568"}},"outputId":"1f38a9c4-0ec9-4b9a-9859-daccb047bfcb"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Выберите действие:\n","1. Посмотреть статус корабля\n","2. Посмотреть статус членов экипажа\n","3. Посмотреть статус миссии\n","4. Полететь на расстояние\n","5. Ремонтировать корпус\n","6. Восстановить здоровье члена экипажа\n","7. Завершить игру\n","Введите номер действия: 1\n","Звездный Искатель - Топливо: 1000, Целостность корпуса: 80, Скорость: 5\n","\n","Выберите действие:\n","1. Посмотреть статус корабля\n","2. Посмотреть статус членов экипажа\n","3. Посмотреть статус миссии\n","4. Полететь на расстояние\n","5. Ремонтировать корпус\n","6. Восстановить здоровье члена экипажа\n","7. Завершить игру\n","Введите номер действия: 7\n","Спасибо за игру!\n"]}]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":[],"metadata":{"id":"x9OxpNsyCcUo"},"execution_count":null,"outputs":[]}]}