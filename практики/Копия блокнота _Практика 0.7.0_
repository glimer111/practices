{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Dnl_nuebn9OHoxAPK24fmV-JxBULix3D","timestamp":1730174061742},{"file_id":"1l_GPJjnpKNgfxCGYwBYdhk5eQjOdijks","timestamp":1730172265758}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"ZLVI_WIcuT56"}},{"cell_type":"code","source":["Бочкарев Пётр Владиславович"],"metadata":{"id":"3AfG_Tal0P2S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 1. HTTP-запросы, ответы и погода\n","\n","Напишите HTTP-запрос для получения информации о погоде в введенном городе из API. Можно использовать API: https://www.gismeteo.ru/api/. Используйте метод GET.\n","\n","\n","Ввод\n","```\n","Екатеринбург\n","```\n","\n","Вывод\n","```\n","Сегодня (1.11) в Екатеринбург 20 ◦С, нет осадков, туман\n","```\n","\n","\n","\n"],"metadata":{"id":"FtjnLNIKzfMZ"}},{"cell_type":"code","source":["import requests\n","from datetime import datetime\n","\n","def get_weather(latitude, longitude):\n","    url = f\"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current_weather=true\"\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","        data = response.json()\n","        temperature = data[\"current_weather\"][\"temperature\"]\n","        weather_code = data[\"current_weather\"][\"weathercode\"]\n","        today = datetime.now().strftime(\"%d.%m\")\n","\n","\n","        if weather_code == 45:\n","            phenomenon = \"туман\"\n","            precipitation = \"нет осадков\"\n","        else:\n","            phenomenon = \"ясно\"\n","            precipitation = \"нет осадков\"\n","\n","        print(f\"Сегодня ({today}) погода {temperature} ◦С, {precipitation}, {phenomenon}\")\n","    else:\n","        print(\"Не удалось получить данные о погоде.\")\n","\n","get_weather(56.50, 60.35)"],"metadata":{"id":"5Mbs40_buVRV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730766119453,"user_tz":-300,"elapsed":1070,"user":{"displayName":"K3nt1c","userId":"06930504406908418568"}},"outputId":"c2dbac45-3a9f-44e7-89da-b39577c8749e"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["{'latitude': 56.5, 'longitude': 60.375, 'generationtime_ms': 0.048041343688964844, 'utc_offset_seconds': 0, 'timezone': 'GMT', 'timezone_abbreviation': 'GMT', 'elevation': 395.0, 'current_weather_units': {'time': 'iso8601', 'interval': 'seconds', 'temperature': '°C', 'windspeed': 'km/h', 'winddirection': '°', 'is_day': '', 'weathercode': 'wmo code'}, 'current_weather': {'time': '2024-11-05T05:15', 'interval': 900, 'temperature': -5.2, 'windspeed': 4.5, 'winddirection': 194, 'is_day': 1, 'weathercode': 3}}\n","Сегодня (05.11) погода -5.2 ◦С, нет осадков, ясно\n"]}]},{"cell_type":"markdown","source":["## Задание 2. HTTP-запросы, ответы и покемоны\n","\n","\n","Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:\n","\n","1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов\n","\n","2. Извлеките имена покемонов из ответа и выведите их списком\n","\n","3. Введите с помощью input() название одного из покемонов\n","\n","\n","```\n","Имя покемона: clefairy\n","```\n","\n","\n","\n","4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне\n","\n","5. Извлеките и выведите следующие данные о введенном покемоне:\n","\n","     • Имя\n","\n","     • Тип\n","\n","     • Вес\n","\n","     • Рост\n","\n","     • Способности\n","\n","Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию."],"metadata":{"id":"oZ1guEbl0PZm"}},{"cell_type":"code","source":["import requests\n","base_url = \"https://pokeapi.co/api/v2\"\n","\n","def get_pokemon_list():\n","    response = requests.get(f\"{base_url}/pokemon?limit=20\")\n","    if response.status_code == 200:\n","        pokemon_data = response.json()\n","        pokemon_names = [pokemon['name'] for pokemon in pokemon_data['results']]\n","\n","        print(\"Список первых 20 покемонов:\")\n","        for name in pokemon_names:\n","            print(name)\n","\n","        return pokemon_names\n","    else:\n","        print(\"Не удалось получить список покемонов.\")\n","        return []\n","\n","def get_pokemon_details(pokemon_name):\n","    response = requests.get(f\"{base_url}/pokemon/{pokemon_name.lower()}\")\n","    if response.status_code == 200:\n","        pokemon_data = response.json()\n","        name = pokemon_data['name']\n","        types = [type_info['type']['name'] for type_info in pokemon_data['types']]\n","        weight = pokemon_data['weight']\n","        height = pokemon_data['height']\n","        abilities = [ability['ability']['name'] for ability in pokemon_data['abilities']]\n","\n","        print(\"\\nИнформация о покемоне:\")\n","        print(f\"Имя: {name.capitalize()}\")\n","        print(f\"Тип: {', '.join(types)}\")\n","        print(f\"Вес: {weight} кг\")\n","        print(f\"Рост: {height} дм\")\n","        print(f\"Способности: {', '.join(abilities)}\")\n","\n","    else:\n","        print(f\"Не удалось получить информацию о покемоне {pokemon_name}.\")\n","\n","\n","pokemon_names = get_pokemon_list()\n","if pokemon_names:\n","    pokemon_name = input(\"\\nВведите имя одного из покемонов из списка: \")\n","    if pokemon_name.lower() in pokemon_names:\n","        get_pokemon_details(pokemon_name)\n","    else:\n","        print(\"Покемон с таким именем не найден в списке.\")"],"metadata":{"id":"JkFmivjp25NL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730178764855,"user_tz":-300,"elapsed":2846,"user":{"displayName":"K3nt1c","userId":"06930504406908418568"}},"outputId":"e0f10507-d3e4-4d79-e4b3-bfd5d91429ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Список первых 20 покемонов:\n","bulbasaur\n","ivysaur\n","venusaur\n","charmander\n","charmeleon\n","charizard\n","squirtle\n","wartortle\n","blastoise\n","caterpie\n","metapod\n","butterfree\n","weedle\n","kakuna\n","beedrill\n","pidgey\n","pidgeotto\n","pidgeot\n","rattata\n","raticate\n","\n","Введите имя одного из покемонов из списка: charmeleon\n","\n","Информация о покемоне:\n","Имя: Charmeleon\n","Тип: fire\n","Вес: 190 кг\n","Рост: 11 дм\n","Способности: blaze, solar-power\n"]}]},{"cell_type":"markdown","source":["## Задание 3. HTTP-запросы, ответы и посты\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:\n","\n","1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON\n","\n","2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON\n","\n","3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль"],"metadata":{"id":"h194KTer1-B3"}},{"cell_type":"code","source":["import requests\n","\n","base_url = \"https://jsonplaceholder.typicode.com\"\n","\n","def get_all_posts():\n","    response = requests.get(f\"{base_url}/posts\")\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print(\"Не удалось получить список постов.\")\n","        return []\n","\n","def get_post_by_id(post_id):\n","    response = requests.get(f\"{base_url}/posts/{post_id}\")\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print(f\"Не удалось получить данные поста с ID {post_id}.\")\n","        return None\n","\n","def print_post_details(post_data):\n","    if post_data:\n","        print(\"\\nИнформация о посте:\")\n","        print(f\"ID: {post_data['id']}\")\n","        print(f\"User ID: {post_data['userId']}\")\n","        print(f\"Title: {post_data['title']}\")\n","        print(f\"Body:\\n{post_data['body']}\")\n","    else:\n","        print(\"Нет данных для отображения.\")\n","\n","\n","posts = get_all_posts()\n","print(\"Список всех постов:\")\n","for post in posts:\n","    print(f\"ID: {post['id']}, Title: {post['title']}\")\n","\n","try:\n","    post_id = int(input(\"\\nВведите ID поста, чтобы получить его данные: \"))\n","    post_data = get_post_by_id(post_id)\n","    print_post_details(post_data)\n","except ValueError:\n","    print(\"Некорректный ID. Пожалуйста, введите числовое значение.\")"],"metadata":{"id":"YANQx4o258Zn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730182045688,"user_tz":-300,"elapsed":4592,"user":{"displayName":"K3nt1c","userId":"06930504406908418568"}},"outputId":"f20d5b96-b071-4656-e4c1-a7274e63d462"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Список всех постов:\n","ID: 1, Title: sunt aut facere repellat provident occaecati excepturi optio reprehenderit\n","ID: 2, Title: qui est esse\n","ID: 3, Title: ea molestias quasi exercitationem repellat qui ipsa sit aut\n","ID: 4, Title: eum et est occaecati\n","ID: 5, Title: nesciunt quas odio\n","ID: 6, Title: dolorem eum magni eos aperiam quia\n","ID: 7, Title: magnam facilis autem\n","ID: 8, Title: dolorem dolore est ipsam\n","ID: 9, Title: nesciunt iure omnis dolorem tempora et accusantium\n","ID: 10, Title: optio molestias id quia eum\n","ID: 11, Title: et ea vero quia laudantium autem\n","ID: 12, Title: in quibusdam tempore odit est dolorem\n","ID: 13, Title: dolorum ut in voluptas mollitia et saepe quo animi\n","ID: 14, Title: voluptatem eligendi optio\n","ID: 15, Title: eveniet quod temporibus\n","ID: 16, Title: sint suscipit perspiciatis velit dolorum rerum ipsa laboriosam odio\n","ID: 17, Title: fugit voluptas sed molestias voluptatem provident\n","ID: 18, Title: voluptate et itaque vero tempora molestiae\n","ID: 19, Title: adipisci placeat illum aut reiciendis qui\n","ID: 20, Title: doloribus ad provident suscipit at\n","ID: 21, Title: asperiores ea ipsam voluptatibus modi minima quia sint\n","ID: 22, Title: dolor sint quo a velit explicabo quia nam\n","ID: 23, Title: maxime id vitae nihil numquam\n","ID: 24, Title: autem hic labore sunt dolores incidunt\n","ID: 25, Title: rem alias distinctio quo quis\n","ID: 26, Title: est et quae odit qui non\n","ID: 27, Title: quasi id et eos tenetur aut quo autem\n","ID: 28, Title: delectus ullam et corporis nulla voluptas sequi\n","ID: 29, Title: iusto eius quod necessitatibus culpa ea\n","ID: 30, Title: a quo magni similique perferendis\n","ID: 31, Title: ullam ut quidem id aut vel consequuntur\n","ID: 32, Title: doloremque illum aliquid sunt\n","ID: 33, Title: qui explicabo molestiae dolorem\n","ID: 34, Title: magnam ut rerum iure\n","ID: 35, Title: id nihil consequatur molestias animi provident\n","ID: 36, Title: fuga nam accusamus voluptas reiciendis itaque\n","ID: 37, Title: provident vel ut sit ratione est\n","ID: 38, Title: explicabo et eos deleniti nostrum ab id repellendus\n","ID: 39, Title: eos dolorem iste accusantium est eaque quam\n","ID: 40, Title: enim quo cumque\n","ID: 41, Title: non est facere\n","ID: 42, Title: commodi ullam sint et excepturi error explicabo praesentium voluptas\n","ID: 43, Title: eligendi iste nostrum consequuntur adipisci praesentium sit beatae perferendis\n","ID: 44, Title: optio dolor molestias sit\n","ID: 45, Title: ut numquam possimus omnis eius suscipit laudantium iure\n","ID: 46, Title: aut quo modi neque nostrum ducimus\n","ID: 47, Title: quibusdam cumque rem aut deserunt\n","ID: 48, Title: ut voluptatem illum ea doloribus itaque eos\n","ID: 49, Title: laborum non sunt aut ut assumenda perspiciatis voluptas\n","ID: 50, Title: repellendus qui recusandae incidunt voluptates tenetur qui omnis exercitationem\n","ID: 51, Title: soluta aliquam aperiam consequatur illo quis voluptas\n","ID: 52, Title: qui enim et consequuntur quia animi quis voluptate quibusdam\n","ID: 53, Title: ut quo aut ducimus alias\n","ID: 54, Title: sit asperiores ipsam eveniet odio non quia\n","ID: 55, Title: sit vel voluptatem et non libero\n","ID: 56, Title: qui et at rerum necessitatibus\n","ID: 57, Title: sed ab est est\n","ID: 58, Title: voluptatum itaque dolores nisi et quasi\n","ID: 59, Title: qui commodi dolor at maiores et quis id accusantium\n","ID: 60, Title: consequatur placeat omnis quisquam quia reprehenderit fugit veritatis facere\n","ID: 61, Title: voluptatem doloribus consectetur est ut ducimus\n","ID: 62, Title: beatae enim quia vel\n","ID: 63, Title: voluptas blanditiis repellendus animi ducimus error sapiente et suscipit\n","ID: 64, Title: et fugit quas eum in in aperiam quod\n","ID: 65, Title: consequatur id enim sunt et et\n","ID: 66, Title: repudiandae ea animi iusto\n","ID: 67, Title: aliquid eos sed fuga est maxime repellendus\n","ID: 68, Title: odio quis facere architecto reiciendis optio\n","ID: 69, Title: fugiat quod pariatur odit minima\n","ID: 70, Title: voluptatem laborum magni\n","ID: 71, Title: et iusto veniam et illum aut fuga\n","ID: 72, Title: sint hic doloribus consequatur eos non id\n","ID: 73, Title: consequuntur deleniti eos quia temporibus ab aliquid at\n","ID: 74, Title: enim unde ratione doloribus quas enim ut sit sapiente\n","ID: 75, Title: dignissimos eum dolor ut enim et delectus in\n","ID: 76, Title: doloremque officiis ad et non perferendis\n","ID: 77, Title: necessitatibus quasi exercitationem odio\n","ID: 78, Title: quam voluptatibus rerum veritatis\n","ID: 79, Title: pariatur consequatur quia magnam autem omnis non amet\n","ID: 80, Title: labore in ex et explicabo corporis aut quas\n","ID: 81, Title: tempora rem veritatis voluptas quo dolores vero\n","ID: 82, Title: laudantium voluptate suscipit sunt enim enim\n","ID: 83, Title: odit et voluptates doloribus alias odio et\n","ID: 84, Title: optio ipsam molestias necessitatibus occaecati facilis veritatis dolores aut\n","ID: 85, Title: dolore veritatis porro provident adipisci blanditiis et sunt\n","ID: 86, Title: placeat quia et porro iste\n","ID: 87, Title: nostrum quis quasi placeat\n","ID: 88, Title: sapiente omnis fugit eos\n","ID: 89, Title: sint soluta et vel magnam aut ut sed qui\n","ID: 90, Title: ad iusto omnis odit dolor voluptatibus\n","ID: 91, Title: aut amet sed\n","ID: 92, Title: ratione ex tenetur perferendis\n","ID: 93, Title: beatae soluta recusandae\n","ID: 94, Title: qui qui voluptates illo iste minima\n","ID: 95, Title: id minus libero illum nam ad officiis\n","ID: 96, Title: quaerat velit veniam amet cupiditate aut numquam ut sequi\n","ID: 97, Title: quas fugiat ut perspiciatis vero provident\n","ID: 98, Title: laboriosam dolor voluptates\n","ID: 99, Title: temporibus sit alias delectus eligendi possimus magni\n","ID: 100, Title: at nam consequatur ea labore ea harum\n","\n","Введите ID поста, чтобы получить его данные: 55\n","\n","Информация о посте:\n","ID: 55\n","User ID: 6\n","Title: sit vel voluptatem et non libero\n","Body:\n","debitis excepturi ea perferendis harum libero optio\n","eos accusamus cum fuga ut sapiente repudiandae\n","et ut incidunt omnis molestiae\n","nihil ut eum odit\n"]}]},{"cell_type":"markdown","source":["## Задание 4. HTTP-запросы, ответы и работа с постами\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:\n","\n","1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON\n","\n","\n","```\n","Заголовок: Новый пост\n","Содержимое поста: Тут должно находиться содержимое нового поста...\n","ID пользователя: 10\n","```\n","\n","\n","\n","2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON\n","\n","3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа"],"metadata":{"id":"4MjiaxDM58ta"}},{"cell_type":"code","source":[],"metadata":{"id":"jZUIdwq96DNl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 5. HTTP-запросы, ответы и пёсики\n","\n","Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.\n","\n","Этапы:\n","\n","1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка\n","\n","2. Реализуйте возможность ввода нескольких пород собак через запятую\n","\n","\n","```\n","african, chow, dingo\n","```\n","\n","\n","\n","3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого\n","\n","\n","Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.\n"],"metadata":{"id":"y0EyPsFQ6mSZ"}},{"cell_type":"code","source":[],"metadata":{"id":"CVJx0B9E8au1"},"execution_count":null,"outputs":[]}]}