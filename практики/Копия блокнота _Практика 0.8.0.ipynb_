{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1-1pREx-cvWdJRwcPZCX2BdqRqwJdniU4","timestamp":1730760059679},{"file_id":"17IcY1UTGzZMUteC1w_OLi1DXlUbhQRJu","timestamp":1730777834927}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Введите ваше ФИО**"],"metadata":{"id":"oP68Ko6DZnFT"}},{"cell_type":"code","source":["Бочкарев Пётр Владиславович"],"metadata":{"id":"_rtkk1A9Zmc5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"ra45s33wUt-C"}},{"cell_type":"markdown","source":["Задача: Создать чат бота для получения информации об исследованиях космоса\n","\n","Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:\n","\n","- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.\n","- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.\n","- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение объектов, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.\n","- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.\n","Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.\n","\n","Требования:\n","- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.\n","- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.\n","- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.\n","- Представление данных: Представляйте данные в четкой и организованной форме.\n","- Опция выхода: позволяет пользователям выходить из приложения в любое время."],"metadata":{"id":"G56D5mNCUwp5"}},{"cell_type":"code","execution_count":124,"metadata":{"id":"wGeJM9n4UqUD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730770505095,"user_tz":-300,"elapsed":17784,"user":{"displayName":"K3nt1c","userId":"06930504406908418568"}},"outputId":"5ee941cd-9b6e-4e98-98f5-7657899cec7d"},"outputs":[{"name":"stdout","output_type":"stream","text":["что вы хотите узнать? астрономческая картинка дня,  фотографии с марсохода,  объекты сближающиеся с землей. \n","объекты сближающиеся с землей\n","Введите дату ГГГГ-ММ-ДД2021-11-10\n"]}],"source":["import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","def get_APOD():\n","  url = f\"https://api.nasa.gov/planetary/apod?api_key=QlcqktWJgrfo9EkUvJz5pHaMqlRK8hTxhaViz6ed\"\n","  response = requests.get(url)\n","  if response.status_code == 200:\n","    data = response.json()\n","\n","  explanation = data['explanation']\n","  image_url = data['url']\n","  res = requests.get(image_url)\n","  img = Image.open(io.BytesIO(res.content))\n","  display(img)\n","\n","  return explanation, display\n","\n","def get_Mars_Roves_Photos(date, cam):\n","  url = f\"https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date={date}&camera={cam}&page=1&api_key=QlcqktWJgrfo9EkUvJz5pHaMqlRK8hTxhaViz6ed\"\n","  response = requests.get(url)\n","  if response.status_code == 200:\n","    data = response.json()\n","\n","  image_url = data['photos'][0]['img_src']\n","  res = requests.get(image_url)\n","  img = Image.open(io.BytesIO(res.content))\n","  display(img)\n","\n","  return display\n","\n","def get_Asteroids(date):\n","  url = f\"https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date={date}&api_key=QlcqktWJgrfo9EkUvJz5pHaMqlRK8hTxhaViz6ed\"\n","  response = requests.get(url)\n","  if response.status_code == 200:\n","    data = response.json()\n","\n","    if date in data['near_earth_objects']:\n","        asteroids_info = []\n","        for asteroid in data['near_earth_objects'][date]:\n","          name = asteroid['name']\n","\n","          diameter_data = asteroid['estimated_diameter']['meters']\n","          average_diameter = (diameter_data['estimated_diameter_min'] + diameter_data['estimated_diameter_max']) / 2\n","          asteroids_info.append({'name': name, 'average_diameter_meters': average_diameter})\n","\n","          return asteroids_info\n","\n","print('что вы хотите узнать?',\n","      'астрономческая картинка дня, ',\n","      'фотографии с марсохода, ',\n","      'объекты сближающиеся с землей. ' )\n","user_choice = input()\n","if user_choice == 'астрономческая картинка дня':\n","  get_APOD\n","if user_choice == 'фотографии с марсохода':\n","  print('введите дату и камеру. ГГГГ-ММ-ДД fhaz/rhaz/mast')\n","  choice = input().split(' ')\n","  get_Mars_Roves_Photos(choice[0], choice[1])\n","if user_choice == 'объекты сближающиеся с землей':\n","  get_Asteroids(input('Введите дату ГГГГ-ММ-ДД'))"]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ia9UtA0cU1Iy"}},{"cell_type":"markdown","source":["Описание задачи\n","\n","Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:\n","\n","Требования:\n","Извлекать произведения искусства:\n","\n","- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.\n","Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.\n","Фильтровать произведения искусства:\n","\n","- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).\n","Отображать подробную информацию об оформлении:\n","\n","- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.\n","После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.\n","Разбивка на страницы и взаимодействие с пользователем:\n","\n","- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.\n","\n","Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.\n","\n","Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы."],"metadata":{"id":"Ofu_GmqrU1Iy"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjUH1GznU1Iy"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"eecUb-akU1ji"}},{"cell_type":"markdown","source":["Задача: Создать программу по управлению портфелем криптовалют\n","\n","Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.\n","\n","Требования:\n","Получение текущих цен на криптовалюты:\n","\n","Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.\n","\n","Управление портфелем:\n","\n","- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.\n","- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).\n","\n","Отслеживание изменения цен:\n","\n","- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.\n","- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.\n","\n","Поиск исторических данных о ценах:\n","\n","- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.\n","- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).\n","\n","Взаимодействие с пользователем:\n","\n","- Реализуйте интерфейс командной строки для ввода данных пользователем.\n","- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.\n"],"metadata":{"id":"jsK7IKptU1ji"}},{"cell_type":"code","source":[],"metadata":{"id":"_0DToTqlvywa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"QGrsZrv5U1s8"}},{"cell_type":"markdown","source":["Задание 4: Проектное\n","\n","Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!\n","\n","\n","Критерии приемки результата:\n","\n","- Проект включает в себя не менее 5 возможостей для пользователя\n","- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку\n","- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)\n","- Проект должен обязательно включать в себя ряд используемых конструкции:\n","    - Функции\n","    - Условные конструкции\n","    - Ввод/вывод\n","    - Словари/Списки\n","- Допускается использование библиотек:\n","    - requests\n","    - datetime\n","    - random"],"metadata":{"id":"qs_XITmYU1s8"}},{"cell_type":"markdown","source":["**Здесь добавьте описание вашего проекта**"],"metadata":{"id":"VKXhaJi4FL0B"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wiA55k1KU1s8"},"outputs":[],"source":["#  А здесь код"]}]}